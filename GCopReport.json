{
  "Items": [
    {
      "Analyzer": "ObjectInitializerAnalyzer",
      "OccurrenceCount": 2,
      "Exceptions": null,
      "SentToServer": true,
      "InstallationName": "SERVER_GISO"
    },
    {
      "Analyzer": "ConstantVariableAnalyzer",
      "OccurrenceCount": 1,
      "Exceptions": {
        "ArgumentException": "El diagnóstico notificado 'GCop179' tiene una ubicación de origen en el archivo 'D:\\ISSUS\\WEB\\Export\\BusinessRiskExportList.aspx.cs', que no forma parte de la compilación que se está analizando.\r\nNombre del parámetro: diagnostic\r\n\r\nSource:\r\n[WebMethod(EnableSession = true)]\r\n[ScriptMethod]\r\npublic static ActionResult PDF(int companyId, string from, string to, long rulesId, long processId, int typeId, string listOrder)\r\n{\r\n    var res = ActionResult.NoAction;\r\n    var user = HttpContext.Current.Session[\"User\"] as ApplicationUser;\r\n    dictionary = HttpContext.Current.Session[\"Dictionary\"] as Dictionary<string, string>;\r\n    var company = new Company(companyId);\r\n    string path = HttpContext.Current.Request.PhysicalApplicationPath;\r\n    if (!path.EndsWith(@\"\\\", StringComparison.OrdinalIgnoreCase))\r\n    {\r\n        path = string.Format(CultureInfo.InvariantCulture, @\"{0}\\\", path);\r\n    }\r\n\r\n    string fileName = string.Format(CultureInfo.InvariantCulture, @\"{0}_{1}_{2:yyyyMMddhhmmss}.pdf\", dictionary[\"Item_BusinessRisks\"], company.Name, DateTime.Now);\r\n#region Fonts\r\n    string pathFonts = HttpContext.Current.Request.PhysicalApplicationPath;\r\n    if (!path.EndsWith(@\"\\\", StringComparison.OrdinalIgnoreCase))\r\n    {\r\n        pathFonts = string.Format(CultureInfo.InstalledUICulture, @\"{0}\\\", pathFonts);\r\n    }\r\n\r\n    var headerFont = BaseFont.CreateFont(string.Format(CultureInfo.InvariantCulture, @\"{0}fonts\\ARIAL.TTF\", pathFonts), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n    var arial = BaseFont.CreateFont(string.Format(CultureInfo.InvariantCulture, @\"{0}fonts\\ARIAL.TTF\", pathFonts), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n    var awesomeFont = BaseFont.CreateFont(string.Format(CultureInfo.InvariantCulture, @\"{0}fonts\\fontawesome-webfont.ttf\", pathFonts), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n    var times = new iTS.Font(arial, 8, iTS.Font.NORMAL, iTS.BaseColor.BLACK);\r\n    var timesBold = new iTS.Font(arial, 8, iTS.Font.BOLD, iTS.BaseColor.BLACK);\r\n    var headerFontFinal = new iTS.Font(headerFont, 9, iTS.Font.NORMAL, iTS.BaseColor.BLACK);\r\n    criteriaFont = new iTS.Font(arial, 10, iTS.Font.NORMAL, iTS.BaseColor.BLACK);\r\n    var titleFont = new iTS.Font(arial, 18, iTS.Font.BOLD, iTS.BaseColor.BLACK);\r\n    var symbolFont = new iTS.Font(awesomeFont, 8, iTS.Font.NORMAL, iTS.BaseColor.BLACK);\r\n    var fontAwesomeIcon = BaseFont.CreateFont(string.Format(CultureInfo.InvariantCulture, @\"{0}fonts\\fontawesome-webfont.ttf\", pathFonts), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n    fontAwe = new Font(fontAwesomeIcon, 10);\r\n#endregion\r\n    var pdfDoc = new iTS.Document(iTS.PageSize.A4.Rotate(), 40, 40, 80, 50);\r\n    var writer = iTextSharp.text.pdf.PdfWriter.GetInstance(pdfDoc, new FileStream(string.Format(CultureInfo.InvariantCulture, @\"{0}Temp\\{1}\", path, fileName), FileMode.Create));\r\n    writer.PageEvent = new TwoColumnHeaderFooter()\r\n    {CompanyLogo = string.Format(CultureInfo.InvariantCulture, @\"{0}\\images\\logos\\{1}.jpg\", path, company.Id), IssusLogo = string.Format(CultureInfo.InvariantCulture, \"{0}issus.png\", path), Date = string.Format(CultureInfo.InvariantCulture, \"{0:dd/MM/yyyy}\", DateTime.Now), CreatedBy = user.UserName, CompanyId = company.Id, CompanyName = company.Name, Title = dictionary[\"Item_BusinessRisks\"].ToUpperInvariant()};\r\n    pdfDoc.Open();\r\n    var titleTable = new iTSpdf.PdfPTable(1);\r\n    titleTable.SetWidths(new float[]{50f});\r\n    titleTable.AddCell(new iTSpdf.PdfPCell(new iTS.Phrase(string.Format(CultureInfo.InvariantCulture, \"{0} - {1}\", dictionary[\"Item_EquipmentList\"], company.Name), titleFont))\r\n    {HorizontalAlignment = iTS.Element.ALIGN_CENTER, Border = iTS.Rectangle.NO_BORDER});\r\n    //------ CRITERIA\r\n    var criteriatable = new iTSpdf.PdfPTable(4)\r\n    {WidthPercentage = 100};\r\n    criteriatable.SetWidths(new float[]{10f, 50f, 10f, 100f});\r\n#region texts\r\n    string criteriaProccess = dictionary[\"Common_All_Male_Plural\"];\r\n    if (processId > 0)\r\n    {\r\n        var process = new Process(processId, companyId);\r\n        if (!string.IsNullOrEmpty(process.Description))\r\n        {\r\n            criteriaProccess = process.Description;\r\n        }\r\n    }\r\n\r\n    string periode = string.Empty;\r\n    if (!string.IsNullOrEmpty(from) && string.IsNullOrEmpty(to))\r\n    {\r\n        periode = dictionary[\"Item_Incident_List_Filter_From\"] + \" \" + from;\r\n    }\r\n    else if (string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(to))\r\n    {\r\n        periode = dictionary[\"Item_Incident_List_Filter_To\"] + \" \" + to;\r\n    }\r\n    else if (!string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(to))\r\n    {\r\n        periode = from + \" - \" + to;\r\n    }\r\n    else\r\n    {\r\n        periode = dictionary[\"Common_All_Male\"];\r\n    }\r\n\r\n    string typetext = dictionary[\"Common_All_Male_Plural\"];\r\n    if (typeId == 1)\r\n    {\r\n        typetext = dictionary[\"Item_BusinessRisk_Status_Assumed\"];\r\n    }\r\n\r\n    if (typeId == 2)\r\n    {\r\n        typetext = dictionary[\"Item_BusinessRisk_Status_Significant\"];\r\n    }\r\n\r\n    if (typeId == 3)\r\n    {\r\n        typetext = dictionary[\"Item_BusinessRisk_Status_NotSignificant\"];\r\n    }\r\n\r\n    if (typeId == 4)\r\n    {\r\n        typetext = dictionary[\"Item_BusinessRisk_Status_Unevaluated\"];\r\n    }\r\n\r\n    string ruleDescription = dictionary[\"Common_All_Female_Plural\"];\r\n    if (rulesId > 0)\r\n    {\r\n        var rule = Rules.GetById(companyId, rulesId);\r\n        if (!string.IsNullOrEmpty(rule.Description))\r\n        {\r\n            ruleDescription = rule.Description;\r\n        }\r\n    }\r\n\r\n#endregion\r\n    var criteria1Label = new iTSpdf.PdfPCell(new iTS.Phrase(dictionary[\"Common_Period\"] + \" :\", timesBold))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria1 = new iTSpdf.PdfPCell(new iTS.Phrase(periode, times))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria2Label = new iTSpdf.PdfPCell(new iTS.Phrase(dictionary[\"Item_BusinesRisk_ListHeader_Process\"] + \" :\", timesBold))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria2 = new iTSpdf.PdfPCell(new iTS.Phrase(typetext, times))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria3Label = new iTSpdf.PdfPCell(new iTS.Phrase(dictionary[\"Item_BusinesRisk_ListHeader_Rule\"] + \" :\", timesBold))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria3 = new iTSpdf.PdfPCell(new iTS.Phrase(ruleDescription, times))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria4Label = new iTSpdf.PdfPCell(new iTS.Phrase(dictionary[\"Item_BusinesRisk_ListHeader_Type\"] + \" :\", timesBold))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    var criteria4 = new iTSpdf.PdfPCell(new iTS.Phrase(criteriaProccess, times))\r\n    {Border = ToolsPdf.BorderNone, HorizontalAlignment = iTS.Element.ALIGN_LEFT, Padding = 6f, PaddingTop = 4f};\r\n    criteriatable.AddCell(criteria1Label);\r\n    criteriatable.AddCell(criteria1);\r\n    criteriatable.AddCell(criteria2Label);\r\n    criteriatable.AddCell(criteria2);\r\n    criteriatable.AddCell(criteria3Label);\r\n    criteriatable.AddCell(criteria3);\r\n    criteriatable.AddCell(criteria4Label);\r\n    criteriatable.AddCell(criteria4);\r\n    pdfDoc.Add(criteriatable);\r\n    //---------------------------\r\n    var table = new iTSpdf.PdfPTable(7)\r\n    {WidthPercentage = 100, HorizontalAlignment = 1, SpacingBefore = 20f, SpacingAfter = 30f};\r\n    table.SetWidths(new float[]{10f, 10f, 30f, 20f, 20f, 10f, 10f});\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_IncidentAction_Header_Type\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_Date\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_Description\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_Process\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_Rule\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_StartValue\"].ToUpperInvariant(), headerFontFinal));\r\n    table.AddCell(ToolsPdf.HeaderCell(dictionary[\"Item_BusinesRisk_ListHeader_IPR\"].ToUpperInvariant(), headerFontFinal));\r\n    int cont = 0;\r\n    var data = HttpContext.Current.Session[\"BusinessRiskFilterData\"] as List<BusinessRiskFilterItem>;\r\n    switch (listOrder.ToUpperInvariant())\r\n    {\r\n        case \"TH1|ASC\":\r\n            data = data.OrderBy(d => d.OpenDate).ToList();\r\n            break;\r\n        case \"TH1|DESC\":\r\n            data = data.OrderByDescending(d => d.OpenDate).ToList();\r\n            break;\r\n        case \"TH2|ASC\":\r\n            data = data.OrderBy(d => d.Description).ToList();\r\n            break;\r\n        case \"TH2|DESC\":\r\n            data = data.OrderByDescending(d => d.Description).ToList();\r\n            break;\r\n        case \"TH3|ASC\":\r\n            data = data.OrderBy(d => d.Process.Description).ToList();\r\n            break;\r\n        case \"TH3|DESC\":\r\n            data = data.OrderByDescending(d => d.Process.Description).ToList();\r\n            break;\r\n        case \"TH4|ASC\":\r\n            data = data.OrderBy(d => d.Rule.Description).ToList();\r\n            break;\r\n        case \"TH4|DESC\":\r\n            data = data.OrderByDescending(d => d.Rule.Description).ToList();\r\n            break;\r\n        case \"TH5|ASC\":\r\n            data = data.OrderBy(d => d.InitialResult).ToList();\r\n            break;\r\n        case \"TH5|DESC\":\r\n            data = data.OrderByDescending(d => d.InitialResult).ToList();\r\n            break;\r\n        case \"TH6|ASC\":\r\n            data = data.OrderBy(d => d.Rule.Limit).ToList();\r\n            break;\r\n        case \"TH6|DESC\":\r\n            data = data.OrderByDescending(d => d.Rule.Limit).ToList();\r\n            break;\r\n    }\r\n\r\n    foreach (BusinessRiskFilterItem risk in data)\r\n    {\r\n        cont++;\r\n        string typeText = string.Empty;\r\n        if (risk.Assumed)\r\n        {\r\n            typeText = dictionary[\"Item_BusinessRisk_Status_Assumed\"];\r\n        }\r\n        else if (risk.InitialResult == 0)\r\n        {\r\n            typeText = dictionary[\"Item_BusinessRisk_Status_Unevaluated\"];\r\n        }\r\n        else if (risk.InitialResult < risk.Rule.Limit)\r\n        {\r\n            typeText = dictionary[\"Item_BusinessRisk_Status_NotSignificant\"];\r\n        }\r\n        else\r\n        {\r\n            typeText = dictionary[\"Item_BusinessRisk_Status_Significant\"];\r\n        }\r\n\r\n        string initialResultText = risk.InitialResult == 0 ? string.Empty : risk.InitialResult.ToString();\r\n        table.AddCell(ToolsPdf.DataCellCenter(typeText, times));\r\n        table.AddCell(ToolsPdf.DataCellCenter(risk.OpenDate, times));\r\n        table.AddCell(ToolsPdf.DataCell(risk.Description, times));\r\n        table.AddCell(ToolsPdf.DataCell(risk.Process.Description, times));\r\n        table.AddCell(ToolsPdf.DataCellCenter(risk.Rule.Description, times));\r\n        table.AddCell(ToolsPdf.DataCellCenter(initialResultText, times));\r\n        table.AddCell(ToolsPdf.DataCellRight(risk.Rule.Limit.ToString(), times));\r\n    }\r\n\r\n    table.AddCell(new iTSpdf.PdfPCell(new iTS.Phrase(string.Format(CultureInfo.InvariantCulture, @\"{0}: {1}\", dictionary[\"Common_RegisterCount\"], cont), times))\r\n    {Border = iTS.Rectangle.TOP_BORDER, Padding = 6f, PaddingTop = 4f, Colspan = 4});\r\n    table.AddCell(new iTSpdf.PdfPCell(new iTS.Phrase(string.Empty, times))\r\n    {Border = iTS.Rectangle.TOP_BORDER, Colspan = 4});\r\n    pdfDoc.Add(table);\r\n    pdfDoc.CloseDocument();\r\n    res.SetSuccess(string.Format(CultureInfo.InvariantCulture, @\"{0}Temp/{1}\", ConfigurationManager.AppSettings[\"siteUrl\"], fileName));\r\n    return res;\r\n}"
      },
      "SentToServer": false,
      "InstallationName": "SERVER_GISO"
    }
  ]
}